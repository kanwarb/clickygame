{"version":3,"sources":["components/Card/index.js","components/Score/index.js","game.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_React$createElement","react_default","a","createElement","className","alt","name","src","image","id","Object","defineProperty","scoreCount","Score","total","status","game","state","crafts","selectedCraftId","score","maxscore","_this","includes","setState","push","length","console","log","i","j","Math","floor","random","_ref","_this2","this","components_Score","goal","map","craft","components_Card","key","Component","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wVAceA,MAXf,SAAcC,GAAO,IAAAC,EACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAAH,EAAA,CAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,MAAOC,GAAIV,EAAMU,IAAlDC,OAAAC,EAAA,EAAAD,CAAAV,EAAA,MAA0D,aAA1DU,OAAAC,EAAA,EAAAD,CAAAV,EAAA,YAAgF,iBAAhFU,OAAAC,EAAA,EAAAD,CAAAV,EAAA,UACS,kBAAMD,EAAMa,WAAWb,EAAMU,MADtCT,OCIOa,SAPD,SAAAd,GAAK,OACjBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,qBAAsCL,EAAMe,OAC5Cb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUL,EAAMgB,WC0DnBC,6MA3DXC,MAAQ,CACJC,SACAC,gBAAiB,GACjBC,MAAO,EACPC,SAAU,EACVN,OAAQ,MAEZH,WAAa,SAACH,GACV,IAAIU,EAAkBG,EAAKL,MAAME,gBAEjC,GAAIA,EAAgBI,SAASd,GACzBa,EAAKE,SAAS,CAAEL,gBAAiB,GAAIC,MAAO,EAAGL,OAAQ,0BAD3D,CAMI,GAFAI,EAAgBM,KAAKhB,GAEU,KAA3BU,EAAgBO,OAGhB,OAFAJ,EAAKE,SAAS,CAAEJ,MAAO,GAAIL,OAAQ,+BAAgCI,gBAAiB,UACpFQ,QAAQC,IAAI,WAIhBN,EAAKE,SAAS,CAAEL,kBAAiBC,MAAOD,EAAgBO,OAAQX,OAAQ,MAExE,IAAK,IAAIc,EAAIX,EAAOQ,OAAS,EAAGG,EAAI,EAAGA,IAAK,CACxC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADAK,EAEf,CAAChB,EAAOY,GAAIZ,EAAOW,IAA3CX,EAAOW,GAFgCK,EAAA,GAE5BhB,EAAOY,GAFqBI,EAAA,8EAO3C,IAAAC,EAAAC,KACL,OACInC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,iCAIJH,EAAAC,EAAAC,cAACkC,EAAD,CAAOvB,MAAOsB,KAAKnB,MAAMG,MACrBkB,KAAM,GACNvB,OAAQqB,KAAKnB,MAAMF,SAEtBG,EAAOqB,IAAI,SAAAC,GAAK,OACbvC,EAAAC,EAAAC,cAACsC,EAAD,CACI7B,WAAYuB,EAAKvB,WACjBH,GAAI+B,EAAM/B,GACViC,IAAKF,EAAM/B,GACXD,MAAOgC,EAAMhC,kBAlDlBmC,aCYJC,MAZf,WAEE,OACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACA5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,OCEnBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.378318e5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} id={props.id} alt=\"thumbnail\" className=\"img-thumbnail\"\r\n        onClick={() => props.scoreCount(props.id)} />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h3 className=\"score\">Your Score --> {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Score;","import React, { Component } from \"react\";\r\nimport crafts from \"./clickcard.json\";\r\nimport Card from \"./components/Card\";\r\nimport Score from \"./components/Score\";\r\n\r\nclass game extends Component {\r\n    state = {\r\n        crafts,\r\n        selectedCraftId: [],\r\n        score: 0,\r\n        maxscore: 8,\r\n        status: \"\"\r\n    };\r\n    scoreCount = (id) => {\r\n        let selectedCraftId = this.state.selectedCraftId;\r\n\r\n        if (selectedCraftId.includes(id)) {\r\n            this.setState({ selectedCraftId: [], score: 0, status: \"You Lost the Game\" });\r\n            return;\r\n        } else {\r\n            selectedCraftId.push(id)\r\n\r\n            if (selectedCraftId.length === 12) {\r\n                this.setState({ score: 12, status: \"You've Landed all the crafts\", selectedCraftId: [] });\r\n                console.log('You Win');\r\n                return;\r\n            }\r\n\r\n            this.setState({ selectedCraftId, score: selectedCraftId.length, status: \" \" });\r\n\r\n            for (let i = crafts.length - 1; i > 0; i--) {\r\n                let j = Math.floor(Math.random() * (i + 1));\r\n                [crafts[i], crafts[j]] = [crafts[j], crafts[i]];\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-container\">\r\n                <header className=\"App-header\">\r\n                    <h1 className=\"App-title\">Clicky Game</h1>\r\n                    <p className=\"App-intro\">\r\n                        Try to click each image once \r\n          </p>\r\n                </header>\r\n                <Score total={this.state.score}\r\n                    goal={12}\r\n                    status={this.state.status}\r\n                />\r\n                {crafts.map(craft => (\r\n                    <Card\r\n                        scoreCount={this.scoreCount}\r\n                        id={craft.id}\r\n                        key={craft.id}\r\n                        image={craft.image}\r\n                    />\r\n\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default game;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport game from \"./game\";\n\nfunction App() {\n  \n  return (\n    <Router>\n    <div className=\"App\">\n      <Route exact path=\"/\" component={game} /> \n     </div>\n     </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}